// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// pwm //
// --- //

#define pwm_wrap_target 2
#define pwm_wrap 8

static const uint16_t pwm_program_instructions[] = {
    0xe081, //  0: set    pindirs, 1                 
    0xe000, //  1: set    pins, 0                    
            //     .wrap_target
    0x6041, //  2: out    y, 1                       
    0x0067, //  3: jmp    !y, 7                      
    0xef01, //  4: set    pins, 1                [15]
    0xe600, //  5: set    pins, 0                [6] 
    0x0002, //  6: jmp    2                          
    0xe701, //  7: set    pins, 1                [7] 
    0xee00, //  8: set    pins, 0                [14]
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pwm_program = {
    .instructions = pwm_program_instructions,
    .length = 9,
    .origin = -1,
};

static inline pio_sm_config pwm_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pwm_wrap_target, offset + pwm_wrap);
    return c;
}

static inline void pwm_program_init(PIO pio, uint sm, uint offset, uint pin, float div) {
    // PIO.set <- pin;
    pio_gpio_init(pio, pin);
    // PIO.set.pin <- out;
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, 1);
    pio_sm_config c = pwm_program_get_default_config(offset);
    // PIOconf.set <- pin;
    sm_config_set_set_pins(&c, pin, 1);
    // PIO.clkdiv <- div;
    pio_sm_set_clkdiv(pio, sm, div);
    // PIOconf.clkdiv <- div;
    sm_config_set_clkdiv(&c, div);
    // PIO.conf <- PIOconf
    pio_sm_init(pio, sm, offset, &c);
}

#endif

